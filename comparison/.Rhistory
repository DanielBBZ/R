source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library(DESeq2)
library(DESeq2)
library(Seurat)
library(Seurat)
install.packages('Matrix')
library("ggplot2")
setwd("E:/R/comparison/")
### Load data matrix ###
AS1ng <- read.table("AS1ng.txt", sep="\t", header=T, row.names=1)
GG1ng <- read.table("GG1ng.txt", sep="\t", header=T, row.names=1)
colnames(AS1ng)
colnames(GG1ng)
#combine two tables
newdata <- merge(AS1ng,GG1ng, by="row.names")
colnames(newdata)
#another way to convert to numeric
cols = c(9, 10, 11, 12)
str(newdata)
myscatter <- function(x, y, data, title){
plot(x, y, main=title,
xla="AS", ylab="GG", pch=19)
abline(fit <- lm(y ~ x, data=data), col='red')
my.p = summary(fit)$coefficients[2,4]
my.R2 = summary(fit)$adj.r.squared
rp = vector('expression',2)
rp[1] = substitute(expression(italic(R)^2 == MYVALUE),
list(MYVALUE = format(my.R2,dig=3)))[2]
rp[2] = substitute(expression(italic(p) == MYOTHERVALUE),
list(MYOTHERVALUE = format(my.p, digits = 2)))[2]
legend('topleft', legend = rp, bty = 'n')
}
attach(newdata)
par(mfrow=c(2,2))
myscatter(AS_1ngS1_1,GG_1ngS1_1, newdata, "1ngS1_1")
myscatter(AS_1ngS1_2,GG_1ngS1_2, newdata, "1ngS1_2")
myscatter(AS_1ngS1_3,GG_1ngS1_3, newdata, "1ngS1_3")
myscatter(AS_1ngS1_4,GG_1ngS1_4, newdata, "1ngS1_4")
fit <- lm(GG_1ngS1_1 ~ AS_1ngS1_1, data=newdata)
fit
summary(fit)
fit <- lm(AS_1ngS1_1 ~ GG_1ngS1_1, data=newdata)
fit
summary(fit)
myscatter <- function(x, y, data, title){
plot(x, y, main=title,
xla="AS", ylab="GG", pch=19)
abline(fit <- lm(y ~ x, data=data), col='red')
my.p = summary(fit)$coefficients[2,4]
my.R2 = summary(fit)$adj.r.squared
my.Coefficients = summary(fit)$coefficients[2,1]
rp = vector('expression',3)
rp[1] = substitute(expression(italic(R)^2 == MYVALUE),
list(MYVALUE = format(my.R2,dig=3)))[2]
rp[2] = substitute(expression(italic(p) == MYOTHERVALUE),
list(MYOTHERVALUE = format(my.p, digits = 2)))[2]
rp[2] = substitute(expression(italic(Coefficients) == MYTHIRDVALUE),
list(MYTHIRDVALUE = format(my.Coefficients, digits = 3)))[2]
legend('topleft', legend = rp, bty = 'n')
}
par(mfrow=c(2,2))
myscatter(GG_1ngS1_1,AS_1ngS1_1, newdata, "1ngS1_1")
my.R2 = summary(fit)$adj.r.squared
par(mfrow=c(2,2))
myscatter(GG_1ngS1_1,AS_1ngS1_1, newdata, "1ngS1_1")
myscatter(GG_1ngS1_2,AS_1ngS1_2, newdata, "1ngS1_2")
myscatter(GG_1ngS1_3,AS_1ngS1_3, newdata, "1ngS1_3")
myscatter(GG_1ngS1_4,AS_1ngS1_4, newdata, "1ngS1_4")
rp
fit
my.p = summary(fit)$coefficients[2,4]
my.R2 = summary(fit)$adj.r.squared
my.Coefficients = summary(fit)$coefficients[2,1]
rp = vector('expression',3)
rp[1] = substitute(expression(italic(R)^2 == MYVALUE),
list(MYVALUE = format(my.R2,dig=3)))[2]
rp[2] = substitute(expression(italic(p) == MYOTHERVALUE),
list(MYOTHERVALUE = format(my.p, digits = 2)))[2]
rp[3] = substitute(expression(italic(Coefficients) == MYTHIRDVALUE),
list(MYTHIRDVALUE = format(my.Coefficients, digits = 3)))[2]
rp
myscatter <- function(x, y, data, title){
plot(x, y, main=title,
xla="AS", ylab="GG", pch=19)
abline(fit <- lm(y ~ x, data=data), col='red')
my.p = summary(fit)$coefficients[2,4]
my.R2 = summary(fit)$adj.r.squared
my.Coefficients = summary(fit)$coefficients[2,1]
rp = vector('expression',3)
rp[1] = substitute(expression(italic(R)^2 == MYVALUE),
list(MYVALUE = format(my.R2,dig=3)))[2]
rp[2] = substitute(expression(italic(p) == MYOTHERVALUE),
list(MYOTHERVALUE = format(my.p, digits = 2)))[2]
rp[3] = substitute(expression(italic(Coefficients) == MYTHIRDVALUE),
list(MYTHIRDVALUE = format(my.Coefficients, digits = 3)))[2]
legend('topleft', legend = rp, bty = 'n')
}
attach(newdata)
par(mfrow=c(2,2))
myscatter(AS_1ngS1_1,GG_1ngS1_1, newdata, "1ngS1_1")
myscatter(AS_1ngS1_2,GG_1ngS1_2, newdata, "1ngS1_2")
myscatter(AS_1ngS1_3,GG_1ngS1_3, newdata, "1ngS1_3")
myscatter(AS_1ngS1_4,GG_1ngS1_4, newdata, "1ngS1_4")
#--------------load another table and compare--------------------#
### Load data matrix ###
AlignReport <- read.table("AlignReport_GGAS.txt", sep="\t", header=T, row.names=1)
#--------------load another table and compare--------------------#
### Load data matrix ###
AlignReport <- read.table("AlignReport_GGAS.txt", sep="\t", header=T, row.names=1)
str(AlignReport)
colnames(AlignReport)
attach(AlignReport)
par(mfrow=c(2,2))
myscatter(AS.Total_read,GG.Total_read, AlignReport, "Total_read No.")
myscatter(AS.Uniquely_mapped_read,GG.Uniquely_mapped_read, AlignReport, "Uniquely_mapped_read No.")
myscatter(AS.Non.uniquely_mapped_read,GG.Non.uniquely_mapped_read, AlignReport, "Non.uniquely_mapped_read No.")
myscatter(AS.Unmapped_read,GG.Unmapped_read, AlignReport, "Unmapped_read No.")
par(mfrow=c(1,2))
myscatter(AS.Total_read,GG.Total_read, AlignReport, "Total_read No.")
myscatter(AS.Uniquely_mapped_read,GG.Uniquely_mapped_read, AlignReport, "Uniquely_mapped_read No.")
head(AS1ng)
AS1nglog2<-log2(AS1ng+0.01)
head(AS1nglog2)
newdatalog2<-log2(newdata+0.01)
#combine two tables
newdata <- merge(AS1ng,GG1ng, by="row.names")
colnames(newdata)
newdatalog2<-log2(newdata+0.01)
str(newdata)
GG1nglog2<-log2(GG1ng+0.01)
#combine two tables
newdatalog2 <- merge(AS1nglog2,GG1nglog2, by="row.names")
colnames(newdatalog2)
attach(newdatalog2)
par(mfrow=c(2,2))
myscatter(AS_1ngS1_1,GG_1ngS1_1, newdatalog2, "1ngS1_1")
myscatter(AS_1ngS1_2,GG_1ngS1_2, newdatalog2, "1ngS1_2")
myscatter(AS_1ngS1_3,GG_1ngS1_3, newdatalog2, "1ngS1_3")
myscatter(AS_1ngS1_4,GG_1ngS1_4, newdatalog2, "1ngS1_4")
attach(newdata)
par(mfrow=c(2,2))
myscatter(AS_1ngS1_1,GG_1ngS1_1, newdata, "1ngS1_1")
myscatter(AS_1ngS1_2,GG_1ngS1_2, newdata, "1ngS1_2")
myscatter(AS_1ngS1_3,GG_1ngS1_3, newdata, "1ngS1_3")
myscatter(AS_1ngS1_4,GG_1ngS1_4, newdata, "1ngS1_4")
myscatter <- function(x, y, data, title){
plot(x, y, main=title,
xla="AS", ylab="GG", pch=19)
abline(fit <- lm(y ~ x, data=data), col='red')
my.p = summary(fit)$coefficients[2,4]
my.R2 = summary(fit)$adj.r.squared
my.Coefficients = summary(fit)$coefficients[2,1]
rp = vector('expression',3)
rp[1] = substitute(expression(italic(R)^2 == MYVALUE),
list(MYVALUE = format(my.R2,dig=3)))[2]
rp[2] = substitute(expression(italic(p) == MYOTHERVALUE),
list(MYOTHERVALUE = format(my.p, digits = 2)))[2]
rp[3] = substitute(expression(italic(Cf) == MYTHIRDVALUE),
list(MYTHIRDVALUE = format(my.Coefficients, digits = 3)))[2]
legend('topleft', legend = rp, bty = 'n')
}
attach(newdatalog2)
par(mfrow=c(2,2))
myscatter(AS_1ngS1_1,GG_1ngS1_1, newdatalog2, "1ngS1_1")
myscatter(AS_1ngS1_2,GG_1ngS1_2, newdatalog2, "1ngS1_2")
myscatter(AS_1ngS1_3,GG_1ngS1_3, newdatalog2, "1ngS1_3")
myscatter(AS_1ngS1_4,GG_1ngS1_4, newdatalog2, "1ngS1_4")
a = c(0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, -1, -1, NA)
b = c(1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, -1, -1, NA)
c = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1,  0,  0)
df = data.frame(a, b, c)
trans = preProcess(df, method = c("center", "scale", "pca"))
prin_comp <- prcomp(t(df), scale = TRUE)
prin_comp <- prcomp(t(df), scale = FALSE)
prin_comp <- prcomp(t(df))
prin_comp <- prcomp(t(df), scale. = FALSE)
a = c(0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, -4, -1, 2)
b = c(1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, -1, -5, 3)
c = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1,  0,  0)
df = data.frame(a, b, c)
prin_comp <- prcomp(t(df), scale. = FALSE)
prin_comp <- prcomp(t(df), scale = FALSE)
prin_comp2 <- prcomp(t(df), scale = TRUE)
prin_comp <- prcomp(t(df), scale = FALSE)
prin_comp2 <- prcomp(t(df), scale = T)
prin_comp <- prcomp(t(df), scale = F)
sapply(1:ncol(t(df)), function(x){
length = unique(pca_data[, x]) %>% length
}) %>% table
library(magrittr)
sapply(1:ncol(t(df)), function(x){
length = unique(pca_data[, x]) %>% length
}) %>% table
length = unique(t(df)[, x]) %>% length
df
scale(t(df))
prin_comp <- prcomp(df, scale = F)
prin_comp2 <- prcomp(df, scale = T)
a = c(0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, -1, -1, NA)
b = c(1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, -1, -1, NA)
c = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1,  1,  0)
df = data.frame(a, b, c)
trans = preProcess(df, method = c("center", "scale", "pca"))
prin_comp2 <- prcomp(df, scale = T)
